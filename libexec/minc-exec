#!/bin/sh
# minc-core : Pure shell script mini container core script
#
# Copyright (C) 2014,2015 Masami Hiramatsu <masami.hiramatsu@gmail.com>
# This program is released under the MIT License, see LICENSE.
LIBEXEC=`dirname $0`
MINCCOAT=$LIBEXEC/minc-coat
MINCLEASH=$LIBEXEC/minc-leash
MINCCAGE=$LIBEXEC/minc-cage
MINC_KERNEL=$LIBEXEC/minc-kernel
MINC_INITRAMFS=$LIBEXEC/minc-initramfs

# Exit if any errors
set -e
test "$MINC_DEBUG" && set -x

# Ensure parameters are set
test "$MINC_BASEDIR"
test "$MINC_TMPDIR"

bindmount() { # dir
  test -e $1 && mount --bind $1 $RD$1
}

bindmount2() { # hostpath containerpath
  test -d $1 && mkdir -p $RD$2
  test -f $1 && mkdir -p `dirname $RD$2` && touch $RD$2
  test -e $1 && mount --bind $1 $RD$2
}

grepumount() { # patterns
  cut -f 2 -d " " < /proc/mounts | grep $@ | sort -r | xargs umount 2>/dev/null || echo -n ""
}

# If PID=1, this is in the new world
if [ $$ -eq 1 ]; then
  # At this point, we still have original namespace procfs
  export MINC_PID=`cut -f 4 -d" " /proc/self/stat`

  # Make private mount namespace
  mount --make-rprivate /

  # Do not update /etc/mtab since the mount is private
  export LIBMOUNT_MTAB=/proc/mounts

  # Setup overlay rootfs
  $MINCCOAT bind $MINC_TMPDIR $MINC_BASEDIR

  RD=$MINC_TMPDIR/root
  mkdir -p $RD/etc $RD/dev $RD/sys $RD/proc

  if [ "$MINC_RWBIND" ]; then
    for i in $MINC_RWBIND; do
      bindmount2 `echo $i | sed "s/:/ /"`
    done
  fi

  if [ "$MINC_UTSNAME" ]; then
    hostname $MINC_UTSNAME
    echo $MINC_UTSNAME > $MINC_TMPDIR/utsname
  elif [ -f $MINC_TMPDIR/utsname ]; then
    hostname `cat $MINC_TMPDIR/utsname`
  fi
  echo $MINC_PID > $MINC_TMPDIR/pid

  # Qemu code runs
  if [ "$MINC_QEMU" -a -x "$MINC_QEMU" ]; then
    echo "#!/bin/sh" > $MINC_TMPDIR/run.sh
    echo "minc -r /mnt/root --name `hostname` \"$@\"" >> $MINC_TMPDIR/run.sh
    echo "poweroff" >> $MINC_TMPDIR/run.sh
    exec $MINC_QEMU -kernel $MINC_KERNEL -initrd $MINC_INITRAMFS -nographic \
	-append "console=ttyS0 root=/dev/ram0 rootfstype=ext2 ro quiet" \
	-virtfs local,id=minc,path=$MINC_TMPDIR,security_model=none,mount_tag=minc -enable-kvm
  fi

  # Hide /etc/mtab in this namespace
  if [ ! -L $RD/etc/mtab ]; then
    rm -f $RD/etc/mtab
    ln -s /proc/mounts $RD/etc/mtab
  fi

  # Prepare /dev special files
  if [ "$MINC_USE_DEV" ]; then
    mount -t devtmpfs devtmpfs $RD/dev
  else
    # Use fake devfs
    mount -t tmpfs tmpfs $RD/dev
    # Prepare pts
    mkdir $RD/dev/pts
    if [ "$MINC_OPT_PTY" ]; then
      # This just a quick hack...
      touch $RD`tty`; bindmount `tty`
      touch $RD/dev/pts/ptmx; bindmount /dev/pts/ptmx
    else
      mount devpts -t devpts -onoexec,nosuid,gid=5,mode=0620,newinstance,ptmxmode=0666 $RD/dev/pts
    fi
    ln -s /dev/pts/ptmx $RD/dev/ptmx
    touch $RD/dev/console; bindmount /dev/console
    touch $RD/dev/null; bindmount /dev/null
    touch $RD/dev/zero; bindmount /dev/zero
    touch $RD/dev/random; bindmount /dev/random
    touch $RD/dev/urandom; bindmount /dev/urandom
    test -d /dev/mqueue && mkdir $RD/dev/mqueue && bindmount /dev/mqueue
    # TODO: Add other devices here
  fi

  # bind qemu-user-mode for cross-arch container
  if [ -x "$MINC_CROSS_QEMU" ]; then
    mkdir -p $RD/usr/bin/
    touch $RD/$MINC_CROSS_QEMU; bindmount $MINC_CROSS_QEMU
  fi

  # Do not bind procfs, since it shows outside pids
  mount -t proc -o ro,nosuid,nodev,noexec proc /proc
  mount -t proc -o rw,nosuid,nodev,noexec,relatime proc $RD/proc
  bindmount /proc/sys
  bindmount /proc/sysrq-trigger
  bindmount /proc/irq
  bindmount /proc/bus
  [ "$MINC_NOPRIV" ] || bindmount /sys

  # Define leash()
  . $MINCLEASH

  # Set cage
  . $MINCCAGE

  # We can not use pivot_root on initramfs
  mount | grep ^"rootfs on / " > /dev/null && export MINC_OPT_SIMPLE=1

  if [ "$MINC_OPT_SIMPLE" ]; then
    # Simply umount unused mount points
    grepumount -e "^/sys" -e "^/dev" -e "^/run"
    leash $RD "$@"
  else
    # To unmount all unused mountpoints, use pivot_root to change root
    cd $RD
    mkdir -p .orig
    pivot_root . .orig
    mount --make-rprivate /.orig
    umount -l /.orig
    RD=.
    leash $RD "exec $@"
  fi
fi

# Setup Network Namespace
if [ "$MINC_NETNS" ]; then
  ip netns add $MINC_NETNS
  TRAPCMD="ip netns del $MINC_NETNS"
  trap "$TRAPCMD" EXIT
  export MINC_NETNSIF=veth0-$MINC_NETNS
  ip link add name $MINC_NETNSIF type veth peer name veth1-$MINC_NETNS
  ip link set $MINC_NETNSIF netns $MINC_NETNS
  IP_NETNS="ip netns exec $MINC_NETNS "
else
  TRAPCMD=
  IP_NETNS=
fi
# Setup CPU limitations
test "$MINC_CPUMASK" && taskset -ap $MINC_CPUMASK $$ > /dev/null

# Prepare Cgroups
CAGECMD=`$MINCCAGE --prepare`
[ "$CAGECMD" ] && TRAPCMD="$CAGECMD;$TRAPCMD"


trap '' INT
trap "rm -f $MINC_TMPDIR/pid;$TRAPCMD" EXIT

cd `dirname $0`; LIBEXEC=`pwd`
cd /

UNSHARE_OPT=
# Enter new namespace and exec command
[ "$MINC_NOPRIV" ] && UNSHARE_OPT=--map-root-user
$IP_NETNS busybox unshare $UNSHARE_OPT -iumpf $LIBEXEC/`basename $0` "$@"
